add（）将前面（调用的元素）和后面（选中的元素）的元素结合起来，统一操作
end（）在链式操作中，回退到最初调用的对象  （类似find（）方法里的prevObject这个属性）
如：$('.wrapper').add('.demo').css({}).end();  //回退到.wrapper这一层
原理：（入栈出栈的操作）
jQuery.prototype.pushStack = function(dom){ //pushStack作用是存入一个prevObject，让prevObject贯穿整个链
  //此时这个dom是  newObj
  if(dom.constructor != jQuery){
    dom = jQuery(dom);
  }
  dom.prevObj = this;  //把调用的对象赋值给前一个对象
  return dom;
}
jQuery.prototype.add = function(selector){
  var curObj = $(selector); //选中的元素
  var baseObj = this;  //调用的元素
  //把选中的元素和调用的元素结合起来
  var newObj = jquery();  //新生成的对象是一个jQuery对象
  for(var i=0;i<curObj.length;i++){
    newObj[newObj.length++]=curObj[i];
  }
  for(var j=0;j<baseObj.length;i++){
    newObj[newObj.length++]=baseObj[j];
  }
  //newObj.prevObject = this;
  this.pushStack(newObj);
  return newObj;
}

jQuery.prototype.end = function(){
  return this.prevObject;
}

.val() 针对form表单里的input框  获取值时也是获取的第一个
区别nextAll和nextUntil
nextAll 接下来所有的
nextUntil 传两个参数 （截止到哪儿、元素筛选）
$('input[type="checkbox"]').eq(0).click(function(){
  if($(this).prop('checked')){
    $(this).nextAll().prop('checked',true);
  }else{
    $(this).nextAll('input[type="checkbox"]').prop('checked',false);
  }
})
$('h1').next().click(function(){
  if($(this).prop('checked')){
    $(this).nextUntil('h1','input[type="checkbox"]').prop('checked',true);
  }else{
    $(this).nextUntil('h1','input[type="checkbox"]').prop('checked',false);
  }
})
$('h2').next().click(function(){
  if($(this).prop('checked')){
    $(this).nextUntil('h2','input[type="checkbox"]').prop('checked',true);
  }else{
    $(this).nextUntil('h2','input[type="checkbox"]').prop('checked',false);
  }
})

