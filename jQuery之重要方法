jquery一些dom属性操作
add（）将前面（调用的元素）和后面（选中的元素）的元素结合起来，统一操作
end（）在链式操作中，回退到最初调用的对象  （类似find（）方法里的prevObject这个属性）
如：$('.wrapper').add('.demo').css({}).end();  //回退到.wrapper这一层
原理：（入栈出栈的操作）
jQuery.prototype.pushStack = function(dom){ //pushStack作用是存入一个prevObject，让prevObject贯穿整个链
  //此时这个dom是  newObj
  if(dom.constructor != jQuery){
    dom = jQuery(dom);
  }
  dom.prevObj = this;  //把调用的对象赋值给前一个对象
  return dom;
}
jQuery.prototype.add = function(selector){
  var curObj = $(selector); //选中的元素
  var baseObj = this;  //调用的元素
  //把选中的元素和调用的元素结合起来
  var newObj = jquery();  //新生成的对象是一个jQuery对象
  for(var i=0;i<curObj.length;i++){
    newObj[newObj.length++]=curObj[i];
  }
  for(var j=0;j<baseObj.length;i++){
    newObj[newObj.length++]=baseObj[j];
  }
  //newObj.prevObject = this;
  this.pushStack(newObj);
  return newObj;
}
jQuery.prototype.end = function(){
  return this.prevObject;
}

.val() 针对form表单里的input框  获取值时也是获取的第一个
区别nextAll和nextUntil
nextAll 接下来所有的
nextUntil 传两个参数 （截止到哪儿、元素筛选）
$('input[type="checkbox"]').eq(0).click(function(){
  if($(this).prop('checked')){
    $(this).nextAll().prop('checked',true);
  }else{
    $(this).nextAll('input[type="checkbox"]').prop('checked',false);
  }
})
$('h1').next().click(function(){
  if($(this).prop('checked')){
    $(this).nextUntil('h1','input[type="checkbox"]').prop('checked',true);
  }else{
    $(this).nextUntil('h1','input[type="checkbox"]').prop('checked',false);
  }
})
$('h2').next().click(function(){
  if($(this).prop('checked')){
    $(this).nextUntil('h2','input[type="checkbox"]').prop('checked',true);
  }else{
    $(this).nextUntil('h2','input[type="checkbox"]').prop('checked',false);
  }
})

$('.wrapper').click(function(ele,index){
  if($(this).hasClass('active')){
    $(this).removeClass('active');
  }else{
    $(this).addClass('active');
  }
})

 siblings()  获取兄弟元素  作用：可以用于进行反选功能
 parent()  上一级父元素
 eg:
 var showArrs = [{name:'nike',id:'101'},{name:'adidas',id:'102'}];
 var str = '';
 showArrs.foreach(function(ele,index){
  str += '<div class="show" data-id="'+ele.id+'"><p>'+ele.name+'</p><button>add</button></div>';
 });
 $('.wrapper').html(str);
 var carArr = [];
 $('button').click(function(){
  carArr.push($(this).parent().attr('data-id'));
 })
 parents()  获取多个上级元素，可以通过传参数控制;不传参数，获得所有父级
 eg:parents('.class')
 closest()  离它最近的父级（包含自己）
 offsetParent() 离它最近的有定位的父级
 slice() 截取 返回的是$对象 两个参数：左闭右开
 eg: $('li').slice(1,6).css({backgroundColor:'red'});
 
 $('a').insertBefore('b').css()  a插入到b的前面,谁在前面，就是操作谁
 $('a').before($('b')).css()  b插在a的前面  before里面填谁，谁就在上面 
 appendTo()  插入到（子级插入到父级里）
 append()    插入（父级里插入子级） 在最后插入
 prepend()   在最前插入

remove（）和detach（）都是删除元素，区别是事件上。remove（）会把事件也删掉，detach（）会把事件保留

wrap()  给元素外面套一层div
$('.demo').wrap('<div class="wrapper"></div>');  给每个类名为demo的div外面套一层类名为wrapper的div
等价于 $('.demo').wrap(function(index){
  return '<div class="wrapper'+ index +'"></div>';
})
wrapInner() 给元素的内部标签的外层套一层
wrapAll()  给一堆div的外层套一层div
unwrap() 删掉直接父级的一层div

clone() 克隆jQuery对象，不传参数的话，不可以克隆事件
clone(true)  传了true的话，可以克隆事件
场景使用：利用clone直接把数据渲染到模板里
data -> jquery 操作data 操作dom ->dom
.tbl{
  display:none;
}
<table class="stb">
<tr class="tpl">
  <td></td>
  <td></td>
  <td></td>
</tr>
</table>
var stuArr = [
  { name:'cst',age:18 },
  { name:'ld',age:18 },
  { name:'jc',age:18 }
];
stuArr.foreach(function(ele,index){
  var oCloneDom = $('.tpl').clone().removeClass('tpl');
  oCloneDom.find('td').eq(0).text(ele.name).next().text(ele.age);
  $('.stb').append(oCloneDom);
})

之前prop() 是操作jQuery中的dom对象
但是prop中的属性不能clone出来
而data()方法是给jQuery中的dom存信息、存数据、存状态
$('.demo').data({
  name:'cst',
  age:18,
  sex:true
})
eg:
<body>
<div class="wrapper">
    <div class="tpl">
        <p></p>
        <span></span>
        <button>add</button>
    </div>
    <p class="show">
        <span>sum</span>
        <span class="sum">0</span>
    </p>
</div>
</body>
<script>
    var shopArr = [
        {
            name: 'jc',
            shopName:'nike',
            price:110,
            id:'1001'
        },
        {
            name: 'cst',
            shopName:'adidas',
            price:90,
            id:'1001'
        },
        {
            name: 'ld',
            shopName:'uk',
            price:120,
            id:'1001'
        }
    ]
    shopArr.forEach(function(ele,index){
        var oCloneDom = $('.tpl').clone().removeClass('tpl');
        //div  jquery cache
        oCloneDom.data({
            id:ele.id,
            shopName:ele.shopName,
            price:ele.price
        }).find('p')
            .text(ele.name)
                .next()
                    .text(ele.price);
        oCloneDom.insertBefore($('.show'));
    })
    $('.wrapper button').click(function(){
        $('.sum').text( +$('.sum').text() + $(this).parent().data('price'));
    })
</script>

jQuery事件绑定
.on()  绑定事件  可以传四个参数  type selector data handle
事件委托 点击li触发事件，但是把事件绑定在ul上
<ul>
  <li></li>
  <li></li>
  <li></li>
</ul>
$('ul').on('click','li',function(e){ //e.target 事件源对象，获取到li; 第二个参数li，就是为了当事件冒泡到ul上的时候，排除ul，只让li执行;
    $(e.target).text()
})
.on() 也可以同时绑定多个事件
er:$('.demo').on({
  click:function(){
    console.log('click');
  },
  mouseenter:function(){
    console.log('mouseenter');
  },
  mouseleave:function(){
    console.log('mouseleave');
  }
})
.one() 只执行一次函数, 类似于setTimeOut() 
.off()  解绑事件  怎么绑定就怎么解绑
$('ul').on('click','li',clickOne);
$('ul').off('click','li',clickOne);
.trigger()  自动触发系统以及自定义的事件
$('.demo').on('click',function(e,a,b,c,d){ //e.target 事件源对象，获取到li; 第二个参数li，就是为了当事件冒泡到ul上的时候，排除ul，只让li执行;
    console.log('click',a,b,c,d);
})
$('.demo').trigger('click',[10,20,30,40]);  //通过数组形式传参数
内部实现原理（这里只能绑定自定义事件并自动触发自定义事件）
jquery.prototype.myOn = function(type,handle){
  for(var i=0;i<this.length;i++){  //this是当前jQuery对象
    if(!this[i].cacheEvent){  //设置一个缓存对象
      this[i].cacheEvent;
    }
    if(!this[i].cacheEvent[type]){  //看缓存对象中是否有这个类型，通过对象的属性不能重复来判断
      this[i].cacheEvent[type] = [handle];
    }else{
       this[i].cacheEvent[type].push(handle);
    }
  }  
}
jquery.prototype.myTrigger = function(type){
  var params = arguments > 1 ? [].slice.call(arguments,1) : []; //获取传过来的参数，arguments表示实参列表，把参数转化成数组形式
  var self = this;  //这里的this是调用myTrigger这个方法的jQuery对象
  for(var i=0;i<this.length;i++){
    if(this[i].cacheEvent[type]){
      this[i].cacheEvent[type].foreach(function(ele,index){
        //这里的this是window，所以需要在外面先把this保存起来
        ele.apply(self,params);
      })
    }
  }
}
.hover()   (就等于mouseenter+mouseleave)
$('.demo').hover(function(){
  //移入
},function(){
  //移出
})

jQuery动画相关方法：
.hide()  .show()  .toggle()
宽、高、透明度等等都发生变化
参数：null或（duration、easing、callback）
$('p').on('click',function(){
  /*if($(this).next().css('display')=='none'){
    $(this).next().show(1000,'swing');
  }else{
    $(this).next().hide(1000,'linear');
  }*/
  等价于 $(this).next().toggle();
})
fadeIn 淡入 fadeOut 淡出  fadeTo 渐进到 fadeToggle
针对的只是透明度的变化
$('p').on('click',function(){
  /*if($(this).next().css('display')=='none'){
    $(this).next().fadeIn(1000,'swing');
  }else{
    $(this).next().fadeOut(1000,'linear');
  }*/
  等价于 $(this).next().fadeToggle();
})
$('p').on('click',function(){
  /*if($(this).next().css('display')=='none'){
    $(this).next().fadeTo(1000,0.6,'swing',function(){
      console.log(over);
    });
  }else{
    $(this).next().fadeTo(1000,0.1,'linear',function(){
      console.log(over);
    });
  }*/
  等价于 $(this).next().fadeToggle();
})
slideDown 卷出  slideUp 卷入  slideToggle
主要关注的是高度的变化

animate() 
//target  duration  speed(easing)  callback
//默认duration是400   ； slow是600 ；fast是200  ；swing是先慢后快，加速运动
/*$('.demo').animate({width:'+=50',height:'+=50',left:'+=100',top:'+=100'},1000,'swing',function(){
    alert(over);
});*/
//实现点击分两次动画  (在回调里嵌套太多的话就会遇到回调地狱)
$('.demo').click(function(){
    /*$(this).animate({width:'+=50',height:'+=50',left:'+=100',top:'+=100'},1000,'swing',function(){
        $(this).animate({width:'+=50',height:'+=50',left:'+=100',top:'+=100'},1000,'swing');
    });*/
    //animate()里内部提供了内置队列，会把每次运动任务存入队列中，执行完前一个才能执行之后的，所以无需在调用函数里执行嵌套代码
    $(this).animate({width:'+=50',height:'+=50',left:'+=100',top:'+=100'},1000,'swing')
        .animate({width:'+=50',height:'+=50',left:'+=100',top:'+=100'},1000,'swing');
})
stop()停止运动 //stop() 停止当前运动  stop(true) 停止所有运动  stop(true,true) 停止当前运动并且迅速移动到当前运动的目标点
$('#stopBtn').on('click',function(){
      $('.demo').stop();  
})
finish()  //finish() 没有参数  直接到达最后一次运动的目标点
$('#finishBtn').on('click',function(){
    $('.demo').finish();  
})
delay()  在运动过程中进行延迟
$('.demo')
        .animate({width:'+=50',height:'+=50',left:'+=100',top:'+=100'},1000,'swing')
          .delay(1000)
            .animate({width:'+=50',height:'+=50',left:'+=100',top:'-=100'},1000,'swing');
jQuery.fx.off = true;  //去掉动画，直接到达目标点

了解queue（入队） dequeue（出队） clearQueue（清空队列）
//jquery queue dequeue clearQueue
    //queue  入队
    //创建队列时  传两个参数  type  content
    //队列在内部就是一个数组，有一个对象 {chain:[function,function,function]}
    $('.demo').queue('chain',function(){  //给队列起名为chain,创建队列就是把内容填入到数组里
    console.log('over1');
    }).queue('chain',function(){
        console.log('over2');
    }).queue('chain',function(){
        console.log('over3');
    })
    console.log($('.demo').queue('chain'));
    //dequeue 出队  type
    $('.demo').dequeue('chain');  //只出队当前第一个

    //给回调函数里传一个next，出队时所有的都出队
    $('.demo').queue('chain',function(next){  //给队列起名为chain,创建队列就是把内容填入到数组里
        console.log('over1');
        next();
    }).queue('chain',function(next){
        console.log('over2');
        next();
    }).queue('chain',function(next){
        console.log('over3');
    })
    console.log($('.demo').queue('chain'));
    //dequeue 出队  type
    $('.demo').dequeue('chain');  //所有的都出队

    //clearQueue  清空所有队列
    
    //应用
    $('.demo')
    .css({position:'absolute',left:0,top:0,width:100,height:100,backgroundColor:red})
    .on('click',function () {
            $(this).dequeue('chain');
    }).queue('chain',function(next){  //给队列起名为chain,创建队列就是把内容填入到数组里
            $(this).animate({width:'+=50',height:'+=50',left:'+=100',top:'+=100'});
            next();
    }).queue('chain',function(next){  //给队列起名为chain,创建队列就是把内容填入到数组里
            $(this).animate({width:'+=50',height:'+=50',left:'+=100',top:'+=100'});
            next();
    }).queue('chain',function(next){  //给队列起名为chain,创建队列就是把内容填入到数组里
            $(this).animate({width:'+=50',height:'+=50',left:'+=100',top:'+=100'});
    })
    
queue,dequeue 内部实现原理
jquery.prototype.myQueue = function(type,handle){
        var queueObj = this;  //this就是外界调用myQueue这个方法时的jquery dom对象
        var queueName = arguments[0] || 'fx';  //实参列表里的第一个参数，也就是type，即队列的名字
        var addFunc = arguments[1] || null;  //实参列表的第二个参数，也就是要执行的操作函数
        var len = arguments.length;
        //根据len的值判断是取还是创建
        //获取队列
        if(len==1){
            return queueObj[0][queueName];   //返回队列数组
        }
        //创建队列或往已有队列中添加内容  queueObj[0]代表的就是jQuery的dom对象
        queueObj[0][queueName] == undefined ? [addFunc] : queueObj[0][queueName].push(addFunc);//判断该对象中有没有队列名（如：chain），没有就创建一个新的，有就往进push
        return this; //进行链式操作的关键
    }
    jquery.prototype.myDequeue = function(type){
        var self = this;
            var queueName = arguments[0] || 'fx';
            var queueArr = this.myQueue(queueName);
            var currfunc = queueArr.shift();  //拿出第一个数组中的元素(即第一个操作函数来进行执行)

            //递归的出口
            if(currfunc == undefined){
                return;
            }
            //通过递归
            var next = function(){  //next()里的this因为没有jQuery对象调用，而是直接执行next()，所以这里的this是指window，不能直接用this
                self.myDequeue(queueName);
            }
            currfunc(next);   //next作为参数传给当前执行的函数
            return this;
    }

animate实现原理(以及)
jquery.prototype.myAnimate = function(json,callback){ //json表示运动的目标点，callback表示回调函数
        var len = this.length;
        var self = this;
        //最后添加到队列里的内容函数
        var baseFunc = function(next){
            var times = 0;
            for(var i=0;i<len;i++){  //通过for循环，让所有的dom都执行，运动到目标点
                startMove(self[i],json,function () {
                    times++;
                    if(times == len){
                        callback && callback();
                        next();
                    }
                })
            }
        }
        //进行入队
        this.myQueue('fx',baseFunc);
        if(this.myQueue('fx').length ==1 ){ //入队之后进行出队
            this.myDequeue('fx');
        }
        return this;
    }
    jquery.prototype.myDelay = function (duration) {
        var queueArr = this[0]['fx']; //获取到队列数组（要根据队列名称来获取，但一般不传队列名称，所以用默认的'fx'）
        queueArr.push(function (next) {  //往队列里再填入一个函数
            setTimeout(function () {
                next();
            },duration);
        })
        return this;
    }
    
jquery实例方法---位置图形
位置坐标图形大小相关方法：
.offset()  永远参照文档定位（与原生js里的offSet有区别：原生是相对于最近的有定位的父级的偏移量） 可以获取也可以赋值
.position()  和css定位规则一样   只能获取，不能赋值
.scrollTop()  滚动距离（距顶部）  可以获取也可以赋值
.scrollLeft()  滚动距离（距左边）  可以获取也可以赋值
.width() .heigth()                      content
.innerWidth()  .innerHeigth()           content+padding
.outerWidth()  .outerHeight()           content+padding+border
.outerWidth(true) .outerHeight(true)    content+padding+border+margin

遍历索引相关方法：
.each()  .index()  .children()
eg:$('li').each(function(index,ele){  //ele就是原生js dom对象
  $(ele).text(index).addClass('demo'+index);
})
<p>
  <span></span>
  <i></i>
</p>
$('p').children().each(function(index,ele){
  if(ele.nodeName=='I'){
    $(ele).text('i-'+index);
  }else{
    $(ele).text('span-'+index);
  }
})
.index() 获取某个元素的索引
$('ul').on('click','li',function(e){
  $(e.target).index();
})
.index(传参数)  可以起到过滤的作用
$('p').on('click',function(e){
  $('p span').index($(e.target));
})


jquery工具方法  （之前讲的都是实例方法）
typeof()  //里面的数据是什么类型  特殊typeof(null) --> Object
undefined  String  Number  Boolean  Object  Function  不精确
$.type(); //里面的数据到底是什么  更精确
console.log($.type(undefined)); //undefineed
console.log($.type('abc')); //string
console.log($.type(123)); //number
console.log($.type(true)); //boolean
console.log($.type(function(){})); //function
console.log($.type(null)); //null
console.log($.type({})); //object
console.log($.type([1,2,3,4])); //array
console.log($.type(new Date())); //date
console.log($.type(new Number())); //number
console.log($.type(new Person())); //object
function Person(){}
$.isArray([1,2,3]) 
$.isFunction(function(){})
特殊：
$.isFunction((function(){}()));  //false  立即执行函数返回的是空（null）
$.isWindow(window)  true   //在遇到iframe时，有用
$.trim()   去掉前后空格，返回的是字符串
$.proxy() 改变this指向， 类似于bind()
eg:
function show(){
  console.log(this);
}
var obj = {
  name:'deng',
  age:12
}
var showProxy = $.proxy(show,obj);
showProxy();  //此时this指向obj
单对象编程 ，通过this来实现，类似立即执行函数 ， 防止变量污染
var list ={
  init:function(){
    this.ms = 123;
    this.dom = document.getElementById('demo');
    this.bindEvent();
  },
  bindEvent:function(){
   // this.dom.onclick = this.show;  //执行完这句代码后，this变成了dom，已经不是最初的list了
   //通过proxy改变回来this指向
   this.dom.onclick = $.proxy(this.show,this);
  },
  show:function(){  //执行完上面bindEvent方法后，this变成了dom，已经不是最初的list了，所以要在上面就改了
    console.log(this.produseMs(this.ms))    
  }
  produseMs:function(ms){
    return ms + 234;
  }
}
list.init();

$.noConflict();  //防止变量名冲突
var $C = $.noConflict();
这里$C其实就是$





