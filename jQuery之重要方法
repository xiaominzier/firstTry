add（）将前面（调用的元素）和后面（选中的元素）的元素结合起来，统一操作
end（）在链式操作中，回退到最初调用的对象  （类似find（）方法里的prevObject这个属性）
如：$('.wrapper').add('.demo').css({}).end();  //回退到.wrapper这一层
原理：（入栈出栈的操作）
jQuery.prototype.pushStack = function(dom){ //pushStack作用是存入一个prevObject，让prevObject贯穿整个链
  //此时这个dom是  newObj
  if(dom.constructor != jQuery){
    dom = jQuery(dom);
  }
  dom.prevObj = this;  //把调用的对象赋值给前一个对象
  return dom;
}
jQuery.prototype.add = function(selector){
  var curObj = $(selector); //选中的元素
  var baseObj = this;  //调用的元素
  //把选中的元素和调用的元素结合起来
  var newObj = jquery();  //新生成的对象是一个jQuery对象
  for(var i=0;i<curObj.length;i++){
    newObj[newObj.length++]=curObj[i];
  }
  for(var j=0;j<baseObj.length;i++){
    newObj[newObj.length++]=baseObj[j];
  }
  //newObj.prevObject = this;
  this.pushStack(newObj);
  return newObj;
}

jQuery.prototype.end = function(){
  return this.prevObject;
}

.val() 针对form表单里的input框  获取值时也是获取的第一个
区别nextAll和nextUntil
nextAll 接下来所有的
nextUntil 传两个参数 （截止到哪儿、元素筛选）
$('input[type="checkbox"]').eq(0).click(function(){
  if($(this).prop('checked')){
    $(this).nextAll().prop('checked',true);
  }else{
    $(this).nextAll('input[type="checkbox"]').prop('checked',false);
  }
})
$('h1').next().click(function(){
  if($(this).prop('checked')){
    $(this).nextUntil('h1','input[type="checkbox"]').prop('checked',true);
  }else{
    $(this).nextUntil('h1','input[type="checkbox"]').prop('checked',false);
  }
})
$('h2').next().click(function(){
  if($(this).prop('checked')){
    $(this).nextUntil('h2','input[type="checkbox"]').prop('checked',true);
  }else{
    $(this).nextUntil('h2','input[type="checkbox"]').prop('checked',false);
  }
})

$('.wrapper').click(function(ele,index){
  if($(this).hasClass('active')){
    $(this).removeClass('active');
  }else{
    $(this).addClass('active');
  }
})
 siblings()  获取兄弟元素  作用：可以用于进行反选功能
 parent()  上一级父元素
 eg:
 var showArrs = [{name:'nike',id:'101'},{name:'adidas',id:'102'}];
 var str = '';
 showArrs.foreach(function(ele,index){
  str += '<div class="show" data-id="'+ele.id+'"><p>'+ele.name+'</p><button>add</button></div>';
 });
 $('.wrapper').html(str);
 var carArr = [];
 $('button').click(function(){
  carArr.push($(this).parent().attr('data-id'));
 })
 parents()  获取多个上级元素，可以通过传参数控制;不传参数，获得所有父级
 eg:parents('.class')
 closest()  离它最近的父级（包含自己）
 offsetParent() 离它最近的有定位的父级
 slice() 截取 返回的是$对象 两个参数：左闭右开
 eg: $('li').slice(1,6).css({backgroundColor:'red'});
 
 $('a').insertBefore('b').css()  a插入到b的前面,谁在前面，就是操作谁
 $('a').before($('b')).css()  b插在a的前面  before里面填谁，谁就在上面 
 appendTo()  插入到（子级插入到父级里）
 append()    插入（父级里插入子级） 在最后插入
 prepend()   在最前插入

remove（）和detach（）都是删除元素，区别是事件上。remove（）会把事件也删掉，detach（）会把事件保留

wrap()  给元素外面套一层div
$('.demo').wrap('<div class="wrapper"></div>');  给每个类名为demo的div外面套一层类名为wrapper的div
等价于 $('.demo').wrap(function(index){
  return '<div class="wrapper'+ index +'"></div>';
})
wrapInner() 给元素的内部标签的外层套一层
wrapAll()  给一堆div的外层套一层div
unwrap() 删掉直接父级的一层div

clone() 克隆jQuery对象，不传参数的话，不可以克隆事件
clone(true)  传了true的话，可以克隆事件
场景使用：利用clone直接把数据渲染到模板里
data -> jquery 操作data 操作dom ->dom
<table class="stb">
<tr class="tpl">
  <td></td>
  <td></td>
  <td></td>
</tr>
</table>
var stuArr = [
  { name:'cst',age:18 },
  { name:'ld',age:18 },
  { name:'jc',age:18 }
];
stuArr.foreach(function(ele,index){
  var oCloneDom = $('.tpl').clone().removeClass('tpl');
  oCloneDom.find('td').eq(0).text(ele.name).next().text(ele.age);
  $('.stb').append(oCloneDom);
})

之前prop() 是操作jQuery中的dom对象
但是prop中的属性不能clone出来
而data()方法是给jQuery中的dom存信息、存数据、存状态
$('.demo').data({
  name:'cst',
  age:18,
  sex:true
})
eg:
<body>
<div class="wrapper">
    <div class="tpl">
        <p></p>
        <span></span>
        <button>add</button>
    </div>
    <p class="show">
        <span>sum</span>
        <span class="sum">0</span>
    </p>
</div>
</body>
<script>
    var shopArr = [
        {
            name: 'jc',
            shopName:'nike',
            price:110,
            id:'1001'
        },
        {
            name: 'cst',
            shopName:'adidas',
            price:90,
            id:'1001'
        },
        {
            name: 'ld',
            shopName:'uk',
            price:120,
            id:'1001'
        }
    ]
    shopArr.forEach(function(ele,index){
        var oCloneDom = $('.tpl').clone().removeClass('tpl');
        //div  jquery cache
        oCloneDom.data({
            id:ele.id,
            shopName:ele.shopName,
            price:ele.price
        }).find('p')
            .text(ele.name)
                .next()
                    .text(ele.price);
        oCloneDom.insertBefore($('.show'));
    })
    $('.wrapper button').click(function(){
        $('.sum').text( +$('.sum').text() + $(this).parent().data('price'));
    })
</script>







