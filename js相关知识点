原始值：栈内存（string）
引用值：堆内存（array，object）
JavaScript语言特点：
弱类型语言，单线程，跨平台，基于对象的，解释性语言

数组中：split("")将字符串转化为数组， reverse()反转数组中的内容，join("")将数组转换为字符串
二分查找（提高查找效率，但前提是数组为有序数组。比如在数组中找到某个值，判断数组是否是对称数组）
var low = 0; var high = arr.length-1; var mid = (low+high)/2; 通过for循环，不断改变low和high的值（low+i; high-i）
function test(arr){
  if(arr==null){
    return false;
  }
  if(arr instanceOf Array){
    var low = 0;
    high = arr.length-1;  
    for(var i=0;i<arr.length;i++){
      if(arr[low+i] != arr[high-i]){
        return false;
      }
    }
    return true;
  }
}
//优化，省去没必要的循环
循环时，如果知道循环的次数，就用for循环；如果不确定循环次数，就用while循环
function test(arr){
  if(arr==null){
    return false;
  }
  if(arr instanceOf Array){
    var low = 0;
    high = arr.length-1;  
    while(true){
      if(low>high){
        break;
      }
      if(arr[low] != arr[high]){
        return false;
      }
      low++;
      high--;
    }
   return true;
  }
}
判断子串在原串第一次出现的位置  （其实就是indexOf的内部实现逻辑）
function test(origin,sub){
  if(!origin || !sub || origin.length==0 || sub.length){
    return -1;
  }
  for(var i=0;i<origin.length-sub.length+1;i++){
    for(var j=0;j<sub.length;j++){
      if(sub[j] != origin[i+j]){  //i决定从哪个位置开始比
        break;
      }
      if(j==sub.length-1){
        return i;
      }
    }    
  }
  return -1; //所有循环都走完，没有找到，返回-1
}
查找数组中有最大连续增长子序列的长度
var max = 1;  //记录所查过得最大字串的长度
var nowMax = 1; //当前所查子串的长度
for(var i=0; i<arr.length;i++){
  if(arr[i] - arr[i-1] > 0){
    nowMax ++;
  }else{
    max = nowMax > max ? nowMax : max;
    nowMax = 1;
  }
}
//处理数组中最后一个子序列是增长出来的
max = nowMax > max ? nowMax : max;
return max;

柯里化 ---- call 和 apply 的应用
function sum(){
  var sum = 0;
  for(var i=0; i<arguments.length;i++){
    sum += arguments[i];
  }
  return sum;
}
//函数 参数是函数  返回一个函数  这个函数本身是一个高阶函数
function returnDeal(func){
  //接收参数(从第一位之后往下截)
  var arg = [].slice.call(arguments,1) //通过call，使this指向arguments(而此时的arguments是returnDeal里的10,20,30)
   //arg(永远都是10,20,30。形成了一个闭包)
  return function(){
    //执行func(其实func就是sum函数，执行累加功能)
    var _arg = arg.concat([].slice.call(arguments))  //此时arguments是在调用newSum时传入的参数，即30,40,50 （concat把参数10,20,30和30,40,50连接起来）
    return func.apply(window,_arg);
  }
}
var newSum = returnDeal(sum,10,20,30)
newSum(30,40,50);

运行test() 和 newTest()的结果是什么
var a = 5;
function test(){
  a = 0;
  alert(a)
  alert(this.a)
  var a;
  alert(a);
}
执行test，结果为 0（变量声明提升）  5（this指向的是window，因为test相当于全局调用）  0
执行new test ，结果为0  undefined（this指向的是{}空对象）  0

通过正则表达式去重
var reg = /(\w)\1*/g    ()表示一个子表达式 ， \1表示之后的子串均按第一个子串的样式执行
$1让第一个子表达式所匹配字符替换一系列字符串
str.replace(reg,'$1')

var str="1234"
str.length=3;
console.log(str);
结果仍为1234（因为默认会new String ,所以操作的其实是一个临时对象）

this的应用
var name = "222";
var a = {
  name:"111"
  say:function(){
    console.log(this.name)
  }
}
var fun = a.say;
fun();    //相当于window.fun(),所以this指向的是window
a.say();   //this指向对象a
结果为222  111
var b={
  name:"333"
  say:function(fun){
    fun()
  }
}
b.say(a.say)   //执行fun(),this指向的仍然是window
b.say=a.say
b.say();   //this指向的是对象b
结果为222   333

Array 对象属性
constructor 返回对创建此对象的数组函数的引用。 
length 设置或返回数组中元素的数目。 
prototype 使您有能力向对象添加属性和方法。 

Array 对象方法
改变原数组（只有这七个能改变原数组）
push() 向数组的末尾添加一个或更多元素，并返回新的长度。
pop() 删除并返回数组的最后一个元素 
reverse() 颠倒数组中元素的顺序。 
unshift() 向数组的开头添加一个或更多元素，并返回新的长度。 
shift() 删除并返回数组的第一个元素 
splice() 删除元素，并向数组添加新元素。 
sort() 对数组的元素进行排序
规则1.必须写俩形参
规则2.看返回值 （1）返回值为负数，那么前面的数放在前面
               （2）为正数 ，后面的数放在前面
               （3）为0，不动
var arr = [1,3,5,4,10];
arr.sort(function(a,b){//升序
  if(a>b){
    return 1;  //调换位置
  }else{
    return -1;
  }  
})
arr.sort(function(a,b){//降序
  if(a<b){
    return 1;
  }else{
    return -1;
  }  
})
结合一下
arr.sort(function(a,b){
  return a-b;  //升序
  return b-a;  //降序
})
给一个有序数组，乱序
arr.sort(function(){
  return (Math.random() - 0.5);
})
把对象放入数组里，并按对象的年龄升序排
var deng = {
  name:'deng',
  age:18,
  sex:'male'
}
var cheng = {
  name:'deng',
  age:30,
  sex:'male'
}
var zhang = {
  name:'deng',
  age:40,
  sex:'male'
}
var arr = [deng,cheng,zhang];
arr.sort(function(a,b){
  /*if(a.age > b.age){
    return 1;
  }else{
    return -1;
  }*/
  return a.age - b.age;
})
返回一个字符串的字节长度
function retBytes(str){
  var num = str.length;
  for(var i=0;i<str.length;i++){
    if(str.charCodeAt(i)>255){
      num++;
    }
  }
  return num;
}
//根据字符字节长度排序
arr.sort(function(a,b){
  return retBytes(a) - retBytes(b);
})

不改变原数组
concat() 连接两个或更多的数组，并返回结果（返回一个新数组）。 
join() 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。（将数组转换成字符串)
split() 将字符串转换成数组
slice() 从某个已有的数组返回选定的元素   两个参数（从该位开始截取，截取到该位）；传一个参数（从该位截取，一直截到最后）；
不传参数，就空截 （应用：将一个类数组转换成数组）； 传负数，从后面开始截
toSource() 返回该对象的源代码。 
toString() 把数组转换为字符串，并返回结果。 
toLocaleString() 把数组转换为本地数组，并返回结果。 
valueOf() 返回数组对象的原始值 

BOM的组成
window  javascript层级中的顶层对象表示浏览器窗口
window对象属性
窗口可视区大小
clientWidth   不包含滚动条距离
clientHeight
innerWidth    包含滚动条距离
innerHeight 
pageXoffset   滚动条移动的距离
pageYoffset
应用 模拟懒加载
function check(_id){
  var oDiv = document.getElementById(_id);
  if(oDiv.offsetTop <= window.pageYoffset + window.innerHeight){
    setInterval(function(){
      if(oDiv.style.opacity == '1'){
        clearInterval(timer);
      }else{
        oDiv.timer = oDiv.style.opacity = parseFloat(oDiv.style.opacity) + 0.01;
      }     
    },30)
  }
}
window.onscroll = function(){
  check('demo');
}
screenX  screenY  screenLeft  screenTop  浏览器窗口左上角距离电脑屏幕的距离
scrollBy  按照指定的像素值来滚动内容
scrollTo   把内容滚动到指定的坐标
open  弹出一个新的窗口


navigator 包含客户端浏览器的信息
history 包含了浏览器窗口访问过的URL
location 包含了当前URL的信息
screen 包含客户端显示屏的信息


