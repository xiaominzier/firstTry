jquery $.ajax
//参数 obj
//属性 url  
      type请求方式 
      data {}参数 信息
      success:请求成功后的处理函数
      error:请求失败后的处理函数
      complete:请求完成后的处理函数，最后执行
      context:改变函数上下文  改变this指向
      timeout:
      async:true false 是否异步   false(默认有阻塞机制) 
      datatype:'jsonp'  //跨域
function deal(res){
      console.log(res);  //返回的数据
}      
$.ajax({
   url:'',
   type:'GET', 传递参数时，通过在URL后面以？形式传递  'POST' 传递参数时，以参数主体传递 
   async:true,  异步编程 （因为js是单线程编程，所以通过异步来提升执行效率，最后通过回调再返回来此时这个线程里）
   data:{
      key:value
   },
   //跨域
   datatype:'jsonp',
   data:{
      wd:'nba',
      cb:'deal'   //必须是一个全局函数，在全局函数里操作返回的数据
   }
   success:function(res){
    //console.log(res);
    $.each(res.data,function(index,ele){
      console.log(ele);
    })
    //生成标签
   },
   error:function(e){
      console.log(e.status,e.statusText);
   },
   complete:function(){
    //给标签添加事件
   },
   context:$('.wrapper'),   $(this)为wrapper  
});

异步编程是离不开回调机制的-----回调函数就是异步完成后执行的函数
//没有参数  顺序执行
var cb = $.Callbacks();  //创建回调对象
function a(){
      console.log('a',x,y);
}
function b(){
      console.log('b',x,y);
}
cb.add(a,b);  //把需要执行的回调函数放入
cb.fire('10','20');  //执行  （一般是有条件时触发）
//有参数
var cb = $.Callbacks(‘once’);  //只执行一次
var cb = $.Callbacks(‘memory’);  //有记忆功能  在fire之后再添加回调函数，也能执行
var cb = $.Callbacks(‘unique’);  //去重，相同的只执行一次
var cb = $.Callbacks(‘stopOnFalse’);  //当碰到返回值是false的时候，后面的代码就不执行了

//回调机制很好用 --- js单线程 -》 异步编程优化体验 防止阻塞页面 -》 回调函数
//比如：运动函数  animate 当你满足某个状态  接下要去做另外一件事
//$.callback
$.ajax({
      url:'',
      type:'',
      success:function(res){
            res=>
            $.ajax({
                 success:function(){}   //回调套回调，就会出现回调地狱 
            })
      }  //回调机制
})

//回调地狱代码展示
<style>
    .tpl{
        display:none;
    }
    .wrapper{
        overflow: hidden;
        border: 2px solid black;
        width:600px;
        margin:100px auto 0;
    }
    .movieSection{
        float:left;
        width:100px;
        height:100px;
        padding:10px;
    }
    .movieSection img{
        width:100%;
        height:150px;
        cursor:pointer;
    }
    .movieSection h3{
        height:30px;
    }
</style>
<body>
<div class="wrapper">
    <div class="tpl">
        <img src="" />
        <h3 class="movieName"></h3>
    </div>
</div>
</body>
<script  src="JQuery3.3.1.js"></script>
<script>
    $.ajax({
        url: '',
        type:'POST',
        data:{
            username: 'cst',
            password: '123456'
        },
        success:function (res) {
            if(res.data.power=='root'){
                //vip  网络地址发送请求
                $.ajax({
                    url:'',
                    type:'GET',
                    success:function (res) {
                        var data = res.data;
                        var $Wrapper = $('.wrapper');
                        $.each(data,function (index,ele) {
                            var $MovieSection = $('.tpl').clone().removeClass('tpl').addClass('movieSection');
                            $MovieSection.data({id:ele.id}).on('click',function () { //把ID存下来，再绑定事件
                                $.ajax({
                                    url:'',
                                    type:'GET',
                                    data:{
                                        movieId:$(this).data('id')   //通过data再把ID获取到
                                    },
                                    success:function (res) {  //reduce() 把数组返回成字符串
                                        var data = res.data;
                                        var direct = data.direct;
                                        var gut = data.gut;
                                        var mainActor = data.mainActor;
                                        var screenWriter = data.screenWriter;
                                        var htmlStr = '<div class="mask">\
                                            <p>导演：'+direct+'</p>\
                                            <p>剧情：'+gut+'</p>\
                                            <p>主演：'+mainActor.reduce(function (prev,curv) {
                                            prev += curv+' ';
                                            return prev;
                                        },'')+'</p>\
                                             <p>编剧：'+screenWriter.reduce(function (prev,curv) {
                                            prev += curv+' ';
                                            return prev;
                                        },'')+'</p>\
                                            </div>'
                                            
                                            //$('body').html(htmlStr);
                                        $(htmlStr).appendTo('body')
                                            .css({width:400,position:'absolute',left:$(window).outerWidth/2,bottom:100,marginLeft:-200});
                                    }
                                })
                            }).children()
                                .eq(0).attr('src',ele.poster)
                                .next().text(ele.name);

                            $Wrapper.append($MovieSection);   
                        })
                    }
                })
            }else{
                //非vip
            }
        }
    })
</script>
//设计模式  六大原则
//单一职责原则   开闭原则

//解决回调地狱  $.Deferred()
$.ajax() 是有返回值的，它的返回值就是$.Deferred()
//延迟 (最基本的应用：有状态的回调)
    //var df = $.Deferred();
    //   done 成功    fail 失败  progress 正在进行
    //执行时resolve    reject     notify
    //做一件异步的事情
    function createScore(){
        var df = $.Deferred();
        setInterval(function () {
            var score = Math.random()*100;
            if(score > 60){
                df.resolve('congratulations');
            }else if(score < 50){
                df.reject('get out');
            }else{
                df.notify('go on');
            }
        },1500);
        //只返回注册功能 done fail progress
        return df.promise();  //promise() 返回阉割对象 只能注册，不能自动触发
    }
    var df = createScore();
    //注册成功的回调函数
    df.done(function (ms) {
        console.log('oh yeah i do it'+ms);
    })
    //注册失败的回调函数
    df.fail(function (ms) {
        console.log('sorry i am a loser'+ms);
    })
    //注册进行时的回调函数
    df.progress(function (ms) {
        console.log('waiting。。'+ms);
    })

    //then  延迟的核心
    var df = $.Deferred();
    df.done(function () {
        console.log('done1');
    }).fail(function () {
        console.log('fail');
    }).progress(function () {
        console.log('progress');
    }).done(function () {
        console.log('done2');
    })
    //then第一个作用   简化注册的写法(三个参数：分别是done fail progress三个函数)
    df.then(function () {
        console.log('done');
    },function () {
        console.log('fail');
    },function () {
        console.log('progress');
    })
    //线性的链式调用  .then()执行完后，返回一个新的延迟对象
    df.then(function (ms) {
        console.log('on yeah'+ms);
        return 'ok';
    },function (ms) {
        console.log('oh no'+ms);
        return 'no';
    },function (ms) {
        console.log('what'+ms);
        return 'go on';
    }).then(function (param) {
        console.log('泡妞'+param);
    },function (param) {
        console.log(param+'脸');
    },function (param) {
        console.log(param+'加油');
    })

//优化回调地狱
    (function () {
        return $.ajax({
            url:'',
            type:'POST',
            data:{
                username:'',
                password:''
            }
        })   //ajax的返回值，就是promise对象
    })()
    .then(function (res) {
        if(res.data.power == 'root'){
            return $.ajax({
                url:'',
                type:'GET'
            })
        }
    })
    .then(function (res) {
        var data = res.data;
        var $Wrapper = $('.wrapper');
        var df = $.Derferred();
        $.each(data,function (index,ele) {
            var $MovieSection = $('.tpl').clone().removeClass('tpl').addClass('movieSection');
            $MovieSection.data({id: ele.id})
                .on('click',function () {   //事件本身也是异步编程，所以也需要回调.因此自己创建一个延迟对象
                    df.resolve( $(this) );
                })
                    .children()
                        .eq(0).attr('src', ele.poster)
                            .next().text(ele.name);
            $Wrapper.append($MovieSection);
        })
        return df.promise();
    })
    .then(function (dom) {
        return $.ajax({
            url: '',
            type: 'GET',
            data: {
                movieId: dom.data('id')   //通过data再把ID获取到
            }
        })
    })
    .then(function (res) {
        var data = res.data;
        var direct = data.direct;
        var gut = data.gut;
        var mainActor = data.mainActor;
        var screenWriter = data.screenWriter;
        var htmlStr = '<div class="mask">\
             <p>导演：'+direct+'</p>\
             <p>剧情：'+gut+'</p>\
             <p>主演：'+mainActor.reduce(function (prev,curv) {
            prev += curv+' ';
            return prev;
        },'')+'</p>\
            <p>编剧：'+screenWriter.reduce(function (prev,curv) {
            prev += curv+' ';
            return prev;
        },'')+'</p>\
           </div>'
        //$('body').html(htmlStr);
        $(htmlStr).appendTo('body')
            .css({width:400,position:'absolute',left:$(window).outerWidth/2,bottom:100,marginLeft:-200});
    })
